<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.neusoft.dao.IUserDao">

<!--&lt;!&ndash;    配置查询结果的列名和实体属性名的对应关系&ndash;&gt;-->
<!--    id 给定一个唯一标识，是给select标签引用用的-->
<!--    type 是指 实体类的全限定类名-->
    <resultMap id="userMap" type="uSeR">
<!--        id 标签 主键字段的对应-->
        <id property="userId" column="id"></id>
<!--        用于指定非主键 ， column 是数据库中列名-->
<!--        property 用于指定实体类-->
        <result property="userName" column="username"></result>
        <result property="userAddress" column="address"></result>
        <result property="userSex" column="sex"></result>
        <result property="userBirthday" column="birthday"></result>
    </resultMap>

    <sql id="defaultUser">
        select * from user
    </sql>


<!--    <select id="findById" parameterType="INT" resultMap="userMap">-->
<!--        select * from user where id = #{uid}-->
<!--    </select>-->

<!--    &lt;!&ndash;    配置查询所有用户的sql&ndash;&gt;-->
<!--    <select id="findAll"  resultMap="userMap">-->
<!--        select * from  user-->
<!--    </select>-->


<!--        查询所有-->
    <select id="findAll" resultMap="userMap">
        select * from  user
    </select>

<!--    动态sql ognl
        <select id="findByCondition" parameterType="user" resultMap="userMap">
            select * from user where 1=1
            <if test="userName != null">
                and username = #{userName}
            </if>
            <if test="userSex != null">
                and sex = #{userSex}
            </if>
        </select>-->
    <!--    动态sql2 ognl-->
    <select id="findByCondition" parameterType="user" resultMap="userMap">
        select * from user
        <where>
            <if test="userName != null">
                and username = #{userName}
            </if>
            <if test="userSex != null">
                and sex = #{userSex}
            </if>
        </where>
    </select>


    <select id="findUserByQueryVo" parameterType="QueryVo" resultMap="userMap">
        select * from user where username like #{user.userName}
    </select>


    <select id="findUserByIds" resultMap="userMap">
        <include refid="defaultUser"></include>
        <where>
            <if test="ids != null and ids.size() >0">
                <foreach collection="ids" open="and id in (" close=")" item="uid" separator=",">
                    #{uid}
                </foreach>
            </if>
        </where>
    </select>



<!--       通过id进行查询&ndash;&gt;-->
<!--        <select id="findById" parameterType="INT" resultType="com.neusoft.domain.User">-->
    <select id="findById" parameterType="INT" resultMap="userMap">
        select * from user where id = #{uid}
    </select>

<!--        保存用户-->
<!--    savaUser-->
    <insert id="savaUser"  parameterType="user">
--         配置保存时获取插入id keyColumn数据库中的列名 keyProperty实体类
        <selectKey keyColumn="id" keyProperty="userId" resultType="INT">
            select  last_insert_id();
        </selectKey>
        insert into user (username, birthday, sex, address)
         values (#{userName},#{userBirthday} ,#{userSex},#{userAddress})
    </insert>

<!--    更新用户-->
    <update id="updateUser" parameterType="user">
        update user set username = #{userName},birthday=#{userBirthday},
        sex=#{userSex}, address=#{userAddress} where id = #{userId}
    </update>
<!--删除用户-->
    <delete id="deleteUser" parameterType="java.lang.Integer">
        delete from user  where id = #{id}
    </delete>

<!--    根据姓名进行模糊查询-->
<!--    <select id="findByName" parameterType="java.lang.String" resultType="com.neusoft.domain.User">-->
<!--    &#45;&#45;         select * from user where username like '%${value}%';-->

    <select id="findByName" parameterType="java.lang.String" resultMap="userMap">
            select * from user where username like #{userName};
    </select>
<!--    查询总记录数-->
    <select id="findTotal" resultType="java.lang.Integer">
        select count(*) from user;
    </select>

</mapper>
